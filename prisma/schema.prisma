generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String     @id @default(uuid())
  email                    String     @unique
  password                 String
  course                   String
  emailVerified            Boolean    @default(false) @map("email_verified")
  emailTokenExpiry         DateTime?  @map("email_token_expiry")
  emailVerificationToken   String?    @map("email_verification_token")
  resetPasswordTokenExpiry DateTime?  @map("reset_password_token_expiry")
  resetPasswordToken       String?    @map("reset_password_token")
  createdAt                DateTime   @default(now()) @map("created_at")
  updatedAt                DateTime   @updatedAt @map("updated_at")
  role                     Role       @default(STUDENT)
  materials                Material[]
  reactions                Reaction[]

  @@map("users")
}


model Subjects {
  id        String     @id @default(uuid())
  name      String
  couse     String
  professor String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  materials Material[]
  reactions Reaction[]

  @@map("subjects")
}

model Material {
  id        String     @id @default(uuid())
  title     String
  link      String
  userId    String     @map("user_id")
  subjectId String     @map("subject_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  subject   Subjects   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]

  @@map("materials")
}

model Reaction {
  id         String       @id @default(uuid())
  type       ReactionType
  userId     String       @map("user_id")
  materialId String?      @map("material_id")
  subjectId  String?      @map("subject_id")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  material   Material?    @relation(fields: [materialId], references: [id], onDelete: Cascade)
  subject    Subjects?    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, materialId, type])
  @@unique([userId, subjectId, type])
  @@map("reactions")
}

enum Role {
  ADMIN
  STUDENT
}

enum ReactionType {
  LIKE
  REPORT
  FAVORITE
}
