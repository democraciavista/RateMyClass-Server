generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String     @id @default(uuid())
  email                    String     @unique
  password                 String
  course                   String
  emailVerified            Boolean    @default(false) @map("email_verified")
  emailTokenExpiry         DateTime?  @map("email_token_expiry")
  emailVerificationToken   String?    @map("email_verification_token")
  resetPasswordTokenExpiry DateTime?  @map("reset_password_token_expiry")
  resetPasswordToken       String?    @map("reset_password_token")
  createdAt                DateTime   @default(now()) @map("created_at")
  updatedAt                DateTime   @updatedAt @map("updated_at")
  role                     Role       @default(STUDENT)
  materials                Material[]
  reactions                Reaction[]
  reviews                  Review[]

  @@map("users")
}



enum CourseType {
  MANDATORY    
  ELECTIVE_FREE  
  ELECTIVE_PROFILE 
}

model Material {
  id        String     @id @default(uuid())
  title     String
  link      String
  userId    String     @map("user_id")
  disciplineId String     @map("discipline_id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  discipline   Discipline    @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]

  @@map("materials")
}

model Reaction {
  id         String       @id @default(uuid())
  type       ReactionType
  userId     String       @map("user_id")
  materialId String?      @map("material_id")
  disciplineId  String?      @map("discipline_id")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  material   Material?    @relation(fields: [materialId], references: [id], onDelete: Cascade)
  discipline    Discipline?     @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, materialId, type])
  @@unique([userId, disciplineId, type])
  @@map("reactions")
}

enum Role {
  ADMIN
  STUDENT
}

enum ReactionType {
  LIKE
  REPORT
  FAVORITE
}

model Discipline {
  id          String       @id @default(uuid())
  code        String       @unique
  name        String
  professor   String
  course    String
  center      String
  period      Int?      
  type        CourseType
  hours       Int        @map("hours")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  reviews     Review[]  
  materials   Material[]   
  statistics  Statistic[] 
  reactions Reaction[]


  @@map("disciplines")
}

model Review {
  id                     String    @id @default(uuid())
  disciplineId           String    @map("discipline_id")
  userId                 String    @map("user_id")
  passedFirstTry         Boolean   @map("passed_first_try")
  finalGrade             Float     @map("final_grade")
  professorTeachingScore Float     @map("professor_teaching_score")
  periodPaid             String    @map("period_paid") 
  droppedOut             Boolean   @map("dropped_out")
  difficultyLevel        Float       @map("difficulty_level")
  disciplineScore        Float     @map("discipline_score")
  comment                String
  recommendation         String
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  discipline Discipline @relation(fields: [disciplineId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model Statistic {
  id                     String    @id @default(uuid())
  disciplineId           String    @map("discipline_id")
  totalReviews           Int       @map("total_reviews")
  averageGrades          Float     @map("average_grades")
  averageTeachingScore   Float     @map("average_teaching_score")
  averageDifficulty      Float     @map("average_difficulty")
  dropoutRate            Float     @map("dropout_rate") 
  disciplineScore        Float     @map("discipline_score") 
  approvalRate           Float     @map("approval_rate") 
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  discipline Discipline @relation(fields: [disciplineId], references: [id])

  @@map("statistics")
}